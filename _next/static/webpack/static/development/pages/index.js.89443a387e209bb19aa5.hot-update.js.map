{"version":3,"file":"static/webpack/static/development/pages/index.js.89443a387e209bb19aa5.hot-update.js","sources":["webpack:///./pages/index.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { Component } from \"react\";\n\nimport { connect } from \"react-redux\";\nimport keydown from \"react-keydown\";\n\nimport Intro from \"components/Intro\";\nimport FightStart from \"components/FightStart\";\nimport Game from \"components/Game\";\nimport Question from \"components/Question\";\n\nimport questions from \"utils/questionsList\";\nimport { updateState } from \"reduxStore/actions\";\n\nimport { StoreInterface, OpponentInterface } from \"utils/types\";\nimport { Dispatch } from \"redux\";\nimport enemiesList from \"utils/enemiesList\";\n\ninterface Props {\n  state: string;\n  player: OpponentInterface;\n  enemy: OpponentInterface;\n  keydown: { event: KeyboardEvent };\n  dispatch: Dispatch;\n}\n\ninterface State {\n  questionID: number;\n}\n\n@keydown\nclass Index extends Component<Props, State> {\n  componentWillReceiveProps(nextProps: Props) {\n    const { state, enemy, dispatch } = nextProps;\n    if (state === \"attack\") {\n      setTimeout(() => {\n        this.setState(\n          prevState => ({\n            ...prevState,\n            questionID: prevState.questionID + 1\n          }),\n          () => {\n            if (enemy.hp > 0) {\n              dispatch(updateState(\"showQuestion\"));\n            } else {\n              if (enemiesList.indexOf(enemy) < enemiesList.length - 1) {\n                dispatch(updateState(\"changeEnemy\"));\n              } else {\n                dispatch(updateState(\"win\"));\n              }\n            }\n          }\n        );\n      }, 1500);\n    }\n  }\n\n  state = {\n    questionID: 0\n  };\n\n  render() {\n    const { keydown, state } = this.props;\n\n    return (\n      <div className=\"app\">\n        <Intro keydown={keydown} />\n        <End toShow={state === \"win\" || state === \"lose\"} />\n        <FightStart toShow={state === \"startFight\"} />\n        <Question\n          keydown={keydown}\n          question={questions[this.state.questionID]}\n          toShow={state === \"showQuestion\"}\n        />\n        <Game />\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreInterface) {\n  const { state: gameState, enemy, player } = state;\n  return { state: gameState, enemy, player };\n}\n\nexport default connect(mapStateToProps)(Index);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAcA;;;;;;;;;;;;;;;;;;AA0BA;AACA;AADA;AACA;;;;;;AA1BA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAMA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AA9CA;AACA;AAgDA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}
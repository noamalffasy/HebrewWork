{"version":3,"file":"static/webpack/static/development/pages/index.js.5f7bf5f83edd40401c0f.hot-update.js","sources":["webpack:///./components/End.tsx","webpack:///./pages/index.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { Component } from \"react\";\n\ninterface Props {\n  toShow: boolean;\n  didWin: boolean;\n}\n\nclass End extends Component<Props> {\n  render() {\n    const { didWin } = this.props;\n    return (\n      <div className={`end-outer ${this.props.toShow ? \"show\" : \"\"}`}>\n        <div className=\"end-inner\">\n          <h1>{didWin ? \"ניצחת!\" : \"הפסדת!\"}</h1>\n          <p>\n            {didWin\n              ? \"הצלחת לענות נכון על כל השאלות ולהביס את כל האויבים\"\n              : \"לא הצלחת לענות נכון על כל השאלות\"}\n          </p>\n          <span>{didWin ? \"כל הכבוד\" : \"תרצה לנסות שוב?\"}</span>\n          <p className=\"call-to-action\">תרענן את הדף על מנת לשחק שוב</p>\n        </div>\n        <style jsx>{`\n          .end-outer {\n            position: absolute;\n            min-height: 100%;\n            min-width: 100%;\n            background: rgba(0, 0, 0, 0.4);\n            z-index: 2;\n          }\n\n          .end-outer.hide {\n            display: none;\n          }\n\n          .end-inner {\n            direction: rtl;\n            text-align: center;\n            background: #fff;\n            width: 90%;\n            height: 70%;\n            padding: 2rem 4rem;\n            margin: 4rem auto;\n            border-radius: 2px;\n            box-shadow: 0 0 6px 3px rgba(0, 0, 0, 0.15);\n          }\n\n          .end-inner h1 {\n            font-size: 4rem;\n          }\n\n          .end-inner p {\n            font-size: 2rem;\n          }\n\n          .end-inner span {\n            font-size: 3rem;\n            font-weight: bold;\n          }\n\n          .intro-inner p.call-to-action {\n            font-size: 1.5rem;\n            color: #9c9c9c;\n            margin: 1rem 0 0;\n          }\n        `}</style>\n      </div>\n    );\n  }\n}\n\nexport default End;\n","import * as React from \"react\";\nimport { Component } from \"react\";\n\nimport { connect } from \"react-redux\";\nimport keydown from \"react-keydown\";\n\nimport Intro from \"components/Intro\";\nimport End from \"components/End\";\nimport FightStart from \"components/FightStart\";\nimport Game from \"components/Game\";\nimport Question from \"components/Question\";\n\nimport questions from \"utils/questionsList\";\nimport { updateState } from \"reduxStore/actions\";\n\nimport { StoreInterface, OpponentInterface } from \"utils/types\";\nimport { Dispatch } from \"redux\";\nimport enemiesList from \"utils/enemiesList\";\n\ninterface Props {\n  state: string;\n  player: OpponentInterface;\n  enemy: OpponentInterface;\n  keydown: { event: KeyboardEvent };\n  dispatch: Dispatch;\n}\n\ninterface State {\n  questionID: number;\n}\n\n@keydown\nclass Index extends Component<Props, State> {\n  componentWillReceiveProps(nextProps: Props) {\n    const { state, enemy, dispatch } = nextProps;\n    if (state === \"attack\") {\n      setTimeout(() => {\n        this.setState(\n          prevState => ({\n            ...prevState,\n            questionID: prevState.questionID + 1\n          }),\n          () => {\n            if (enemy.hp > 0) {\n              dispatch(updateState(\"showQuestion\"));\n            } else {\n              if (enemiesList.indexOf(enemy) < enemiesList.length - 1) {\n                dispatch(updateState(\"changeEnemy\"));\n              } else {\n                dispatch(updateState(\"win\"));\n              }\n            }\n          }\n        );\n      }, 1500);\n    }\n  }\n\n  state = {\n    questionID: 0\n  };\n\n  render() {\n    const { keydown, state } = this.props;\n\n    return (\n      <div className=\"app\">\n        <Intro keydown={keydown} />\n        <End\n          toShow={state === \"win\" || state === \"lose\"}\n          didWin={state === \"win\"}\n        />\n        <FightStart toShow={state === \"startFight\"} />\n        <Question\n          keydown={keydown}\n          question={questions[this.state.questionID]}\n          toShow={state === \"showQuestion\"}\n        />\n        <Game />\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreInterface) {\n  const { state: gameState, enemy, player } = state;\n  return { state: gameState, enemy, player };\n}\n\nexport default connect(mapStateToProps)(Index);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAMA;;;;;;;;;;;;;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AATA;AAAA;AAAA;AAAA;AAyDA;;;;AA7DA;AACA;AA+DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAcA;;;;;;;;;;;;;;;;;;AA0BA;AACA;AADA;AACA;;;;;;AA1BA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAMA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AAjDA;AACA;AAmDA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}
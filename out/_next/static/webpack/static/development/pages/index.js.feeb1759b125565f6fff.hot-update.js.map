{"version":3,"file":"static/webpack/static/development/pages/index.js.feeb1759b125565f6fff.hot-update.js","sources":["webpack:///./components/Question.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { Component } from \"react\";\n\nimport { Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport keydown from \"react-keydown\";\n\nimport CorrectModal from \"components/CorrectModal\";\nimport Input from \"components/Input\";\n\nimport { updatePlayerHP, updateEnemyHP } from \"reduxStore/actions\";\n\nimport { QuestionInterface } from \"utils/types\";\n\ninterface Props {\n  question: QuestionInterface;\n  dispatch: Dispatch;\n}\n\ninterface State {\n  isOpen: boolean;\n  isCorrect: boolean;\n  showCorrectModal: boolean;\n}\n\nclass Question extends Component<Props, State> {\n  constructor(props) {\n    super(props);\n\n    this.checkAnswer = this.checkAnswer.bind(this);\n    this.dismissModal = this.dismissModal.bind(this);\n  }\n\n  answerInput: Input;\n\n  state = {\n    isOpen: true,\n    isCorrect: null\n  };\n\n  @keydown(\"enter\")\n  checkAnswer() {\n    const { correctAnswer } = this.props.question;\n    const userAnswer = this.answerInput.input.value;\n\n    this.setState(prevState => ({\n      ...prevState,\n      isCorrect: userAnswer === correctAnswer\n    }));\n\n    if (userAnswer === correctAnswer) {\n      this.props.dispatch(updateEnemyHP(-10));\n    } else {\n      this.props.dispatch(updatePlayerHP(-10));\n    }\n\n    this.dismissModal();\n  }\n\n  dismissModal() {\n    this.setState(prevState => ({\n      ...prevState,\n      isOpen: false\n    }));\n  }\n\n  render() {\n    return (\n      <>\n      <CorrectModal isOpen={this.state.showCorrectModal} isCorrect={this.state.isCorrect} question={this.props.question} />\n        <div\n          className={`questions-outer ${!this.state.isOpen ? \"hide\" : \"\"}`}\n          onKeyDown={this.checkAnswer}\n        >\n          <div className=\"questions-inner\">\n            <h1>שאלה מספר {this.props.question.id}</h1>\n            <p>{this.props.question.question}</p>\n            <span>{this.props.question.sentence}</span>\n            <div className=\"answer\">\n              <Input\n                type=\"text\"\n                label={this.props.question.answerLabel}\n                autofocus\n                ref={input => (this.answerInput = input)}\n              />\n            </div>\n            <p className=\"call-to-action\">\n              לחץ על מקש האנטר בכדי לבדוק את התשובה\n            </p>\n          </div>\n          <style jsx>{`\n            .questions-outer {\n              position: absolute;\n              min-height: 100%;\n              min-width: 100%;\n              background: rgba(0, 0, 0, 0.4);\n              z-index: 2;\n            }\n\n            .questions-outer.hide {\n              display: none;\n            }\n\n            .questions-inner {\n              direction: rtl;\n              text-align: center;\n              background: #fff;\n              width: 90%;\n              height: 70%;\n              padding: 2rem 4rem;\n              margin: 10rem auto;\n              border-radius: 2px;\n              box-shadow: 0 0 6px 3px rgba(0, 0, 0, 0.15);\n            }\n\n            .questions-inner h1 {\n              font-size: 2.5rem;\n            }\n\n            .questions-inner p {\n              font-size: 3rem;\n              margin: 0;\n            }\n\n            .questions-inner span {\n              font-size: 4rem;\n              font-weight: bold;\n            }\n\n            .questions-inner .answer {\n              font-size: 2rem;\n              width: 50%;\n              margin: 1.5rem auto;\n            }\n\n            .questions-inner p.call-to-action {\n              font-size: 1.5rem;\n              color: #9c9c9c;\n              margin: 1rem 0 0;\n            }\n          `}</style>\n        </div>\n      </>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  const { player, enemy } = state;\n  return { player, enemy };\n}\n\nexport default connect(mapStateToProps)(Question);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AAeA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAUA;AACA;AAFA;AACA;AAPA;AACA;AAJA;AAKA;AACA;;;AASA;AAAA;AAEA;AAEA;AAAA;AAEA;AAFA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AAAA;AAEA;AAFA;AAAA;AAIA;;;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAhBA;AAAA;AAAA;AAAA;AA0EA;;;;AAvHA;AACA;AAyHA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;A","sourceRoot":""}